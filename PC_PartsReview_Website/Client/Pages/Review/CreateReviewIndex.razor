@page "/reviews/create"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create Review Index</h3>
<hr />
<br />

<EditForm Model="@review" OnValidSubmit="CreateReview">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Review Part: </label>
        <div>
            <InputSelect @bind-Value="review.PcPartId" class="form-control">
                <option value="">== Select Part ==</option>
                @if (PcParts != null)
                {
                    foreach (var pcpart in PcParts)
                    {
                        <option value="@pcpart.Id">@pcpart.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => review.PcPartId)" />
        </div>
    </div>


    <div class="form-group">
        <label>Review Quality: </label>
        <div>
            <InputSelect @bind-Value="review.RatingId" class="form-control">
                <option value="">== Select Quality ==</option>
                @if (Ratings != null)
                {
                    foreach (var rating in Ratings)
                    {
                        <option value="@rating.Id">@rating.Quality</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => review.RatingId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Review Personal Rating: </label>
        <div>
            <InputSelect @bind-Value="review.RatingId" class="form-control">
                <option value="">== Select PersonalRating ==</option>
                @if (Ratings != null)
                {
                    foreach (var rating in Ratings)
                    {
                        <option value="@rating.Id">@rating.PersonalRating</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => review.RatingId)" />
        </div>
    </div>



    <div class="form-group">
        <label>Review Title: </label>
        <div>
            <InputText @bind-Value="@review.ReviewTitle" class="form-control" />
            <ValidationMessage For="@(()=> review.ReviewTitle)" />
        </div>
    </div>

    <div class="form-group">
        <label>Review Description: </label>
        <div>
            <InputText @bind-Value="@review.ReviewDescription" class="form-control" />
            <ValidationMessage For="@(()=> review.ReviewDescription)" />
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        Add Review
    </button>

</EditForm>

@code 
{
    Review review = new Review();

    private IList<Rating>? Ratings;
    private IList<PcPart>? PcParts;


    protected async override Task OnInitializedAsync()
    {
        Ratings = await _client.GetFromJsonAsync<List<Rating>>($"{Endpoints.RatingEndpoint}");
        PcParts = await _client.GetFromJsonAsync<List<PcPart>>($"{Endpoints.PcPartEndpoint}");
    }


    private async Task CreateReview()
    {
        await _client.PostAsJsonAsync(Endpoints.ReviewEndpoint, review);
        _navManager.NavigateTo("/reviews/");
    }

}
